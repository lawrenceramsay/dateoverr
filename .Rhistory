#accepts data tables and data frames
if(is.data.frame(dat)) {
data_type = "df"
data.table::as.data.table(dat)
} else if (is.data.table(dat)) {
data_type = "dt"
} else {
stop("Data needs to be either a data frame or a data table.")
}
#accepts data tables and data frames
if(is.data.frame(dat)) {
data_type = "df"
dat <- data.table::as.data.table(dat)
} else if (is.data.table(dat)) {
data_type = "dt"
} else {
stop("Data needs to be either a data frame or a data table.")
}
stop("Data needs to be either a data frame or a data table.")
dat[,..date_col_name][[1]]
dat_two_groups_col_names <- as.data.table(dat_two_group_csv)
names(dat_two_groups_col_names)[1] <- date_col_name
names(dat_two_groups_col_names)[2] <- value_col_name
names(dat_two_groups_col_names)[3] <- "Group1"
names(dat_two_groups_col_names)[4] <- "Group2"
dat_two_groups_col_names <- data.table::as.data.table(dat_two_group_csv)
names(dat_two_groups_col_names)[1] <- date_col_name
names(dat_two_groups_col_names)[2] <- value_col_name
names(dat_two_groups_col_names)[3] <- "Group1"
names(dat_two_groups_col_names)[4] <- "Group2"
dat <- dat_two_groups_col_names
dat[,..date_col_name][[1]]
#no groups and NA for non existant months
grid <- data.table::as.data.table(
expand.grid(seq(min(dat[,..date_col_name][[1]]),max(dat[,..date_col_name][[1]]), by = "months")),
group = group_cols)
min(dat[,..date_col_name][[1]])
max(dat[,..date_col_name][[1]]
)
seq(min(dat[,..date_col_name][[1]]),max(dat[,..date_col_name][[1]])
)
seq(min(dat[,..date_col_name][[1]]),max(dat[,..date_col_name][[1]]), by = "months")
dat[,..date_col_name][[1]]
typeof(dat[,..date_col_name][[1]])
if (typeof(dat[,..date_col_name][[1]]) == "character") {
stop("Date column must be a date type")
}
dat_two_groups_col_names <- data.table::as.data.table(dat_two_group_csv)
names(dat_two_groups_col_names)[1] <- date_col_name
names(dat_two_groups_col_names)[2] <- value_col_name
names(dat_two_groups_col_names)[3] <- "Group1"
dat_two_group_csv <- read.csv("data//monthly_two_groups.csv")
dat_two_groups_col_names <- data.table::as.data.table(dat_two_group_csv)
names(dat_two_groups_col_names)[1] <- date_col_name
names(dat_two_groups_col_names)[2] <- value_col_name
names(dat_two_groups_col_names)[3] <- "Group1"
names(dat_two_groups_col_names)[4] <- "Group2"
#no groups and NA for non existant months
grid <- data.table::as.data.table(
expand.grid(seq(min(dat[,..date_col_name][[1]]),max(dat[,..date_col_name][[1]]), by = "months")),
group = group_cols)
dat[,..date_col_name][[1]]
dat <- dat_two_groups_col_names
dat_two_groups_col_names <- data.table::as.data.table(dat_two_group_csv)
dat_two_group_csv <- read.csv("data//monthly_two_groups.csv")
dat_two_groups_col_names$dte <- as.Date(dat_two_groups_col_names$dte)
names(dat_two_groups_col_names)[1] <- date_col_name
names(dat_two_groups_col_names)[2] <- value_col_name
names(dat_two_groups_col_names)[3] <- "Group1"
names(dat_two_groups_col_names)[4] <- "Group2"
dat <- dat_two_groups_col_names
#no groups and NA for non existant months
grid <- data.table::as.data.table(
expand.grid(seq(min(dat[,..date_col_name][[1]]),max(dat[,..date_col_name][[1]]), by = "months")),
group = group_cols)
View(grid)
#no groups and NA for non existant months
grid <- data.table::as.data.table(
expand.grid(seq(min(dat[,..date_col_name][[1]]),max(dat[,..date_col_name][[1]]), by = "months")),
group_cols)
View(grid)
#no groups and NA for non existant months
grid <- data.table::as.data.table(
expand.grid(seq(min(dat[,..date_col_name][[1]]),max(dat[,..date_col_name][[1]]), by = "months")),
group_cols[1], group_cols[2])
#no groups and NA for non existant months
grid <- data.table::as.data.table(
expand.grid(seq(min(dat[,..date_col_name][[1]]),max(dat[,..date_col_name][[1]]), by = "months")),
replicate(2, group_cols,simplify = F)
)
group_cols[1]
group_cols[[1]]
group_cols[,1]
group_cols[1]
group_cols = c("Group1", "Group2")
group_cols[1]
dat[,..group_cols[1]][[1]]
dat[,..group_cols[1]]
dat[,group_cols[1]]
#no groups and NA for non existant months
grid <- data.table::as.data.table(
expand.grid(seq(min(dat[,..date_col_name][[1]]),max(dat[,..date_col_name][[1]]), by = "months")),
group = unique(dat[,..Group1][[1]])
)
View(grid)
dat[,Group1]
dat[,Group1][[1]]
dat[,Group1]
dat[,group_cols[[1]]]
dat[,group_cols[1]]
dat[,group_cols[1]]
group_cols[1]
dat[,"Group1"]
dat[,eval(group_cols[1])]
dat[,names(group_cols[1])]
names(group_cols[1])
dat[,quote(group_cols[[1]])]
quote(group_cols[[1]])
group_cols[[1]]
get(group_cols[[1]])
dat[,..get(group_cols[[1]])]
roup_cols[1])
group_cols[1]
get(group_cols[1])
dat[,..get(group_cols[1])]
eval(quote(group_cols[1]))
dat[,..eval(quote(group_cols[1]))]
dat[,eval(quote(group_cols[1]))]
grp_test <- group_cols[1]
dat[,eval(quote(grp_test))]
dat[,get(grp_test)]
dat[,get(group_cols[1])]
unique(dat[,get(group_cols[1])])
#no groups and NA for non existant months
grid <- data.table::as.data.table(
expand.grid(seq(min(dat[,..date_col_name][[1]]),max(dat[,..date_col_name][[1]]), by = "months")),
group_cols[1] = unique(dat[,get(group_cols[1])])
)
#no groups and NA for non existant months
grid <- data.table::as.data.table(
expand.grid(seq(min(dat[,..date_col_name][[1]]),max(dat[,..date_col_name][[1]]), by = "months")),
group = unique(dat[,get(group_cols[1])])
)
View(grid)
#no groups and NA for non existant months
grid <- data.table::as.data.table(
expand.grid(dte = eq(min(dat[,..date_col_name][[1]]),max(dat[,..date_col_name][[1]]), by = "months")),
group = unique(dat[,get(group_cols[1])])
)
#no groups and NA for non existant months
grid <- data.table::as.data.table(
expand.grid(dte = seq(min(dat[,..date_col_name][[1]]),max(dat[,..date_col_name][[1]]), by = "months")),
group = unique(dat[,get(group_cols[1])])
)
View(grid)
eq(min(dat[,..date_col_name][[1]]),max(dat[,..date_col_name][[1]]), by = "months"))
seq(min(dat[,..date_col_name][[1]]),max(dat[,..date_col_name][[1]]), by = "months"))
seq(min(dat[,..date_col_name][[1]]),max(dat[,..date_col_name][[1]]), by = "months")
expand.grid(dte = seq(min(dat[,..date_col_name][[1]]),max(dat[,..date_col_name][[1]]), by = "months"),
group = unique(dat[,get(group_cols[1])]))
#no groups and NA for non existant months
grid <- data.table::as.data.table(
expand.grid(dte = seq(min(dat[,..date_col_name][[1]]),max(dat[,..date_col_name][[1]]), by = "months"),
group = unique(dat[,get(group_cols[1])]))
)
#no groups and NA for non existant months
grid <- data.table::as.data.table(
expand.grid(dte = seq(min(dat[,..date_col_name][[1]]),max(dat[,..date_col_name][[1]]), by = "months"),
group_cols[1] = unique(dat[,get(group_cols[1])]))
)
#no groups and NA for non existant months
grid <- data.table::as.data.table(
expand.grid(dte = seq(min(dat[,..date_col_name][[1]]),max(dat[,..date_col_name][[1]]), by = "months"),
group = unique(dat[,get(group_cols[1])]))
)
#no groups and NA for non existant months
grid <- data.table::as.data.table(
expand.grid(dte = seq(min(dat[,..date_col_name][[1]]),max(dat[,..date_col_name][[1]]), by = "months"),
get(group_cols[1]) = unique(dat[,get(group_cols[1])]))
)
#no groups and NA for non existant months
grid <- data.table::as.data.table(
expand.grid(dte = seq(min(dat[,..date_col_name][[1]]),max(dat[,..date_col_name][[1]]), by = "months"),
quote(group_cols[1]) = unique(dat[,get(group_cols[1])]))
)
#no groups and NA for non existant months
grid <- data.table::as.data.table(
expand.grid(seq(min(dat[,..date_col_name][[1]]),max(dat[,..date_col_name][[1]]), by = "months"),
unique(dat[,get(group_cols[1])]))
)
length(group_cols)
grid <- data.table::as.data.table(
expand.grid(seq(min(dat[,..date_col_name][[1]]),max(dat[,..date_col_name][[1]]), by = "months"),
unique(dat[,get(group_cols[1])]), unique(dat[,get(group_cols[2])])
))
names(grid)[1] <- date_col_name
names(grid)[2] <- group_cols[1]
names(grid)[3] <- group_cols[2]
c(date_col_name, group_cols)
#joins to create all possibilities
dat_grid <- merge(grid, dat, by = c(date_col_name, group_cols), all.x = T)
View(dat_grid)
#shifts data
dat_shift <- dat_grid[, output := dat[,..value_col_name][[1]] -
shift(dat[,..value_col_name][[1]], 1, type = "lag"), by = group_cols]
#shifts data
dat_shift <- dat_grid[, output := dat[,..value_col_name][[1]] -
data.table::shift(dat[,..value_col_name][[1]], 1, type = "lag"), by = group_cols]
#for running function code two groups
group_cols = c("Group1")
#shifts data
dat_shift <- dat_grid[, output := dat[,..value_col_name][[1]] -
data.table::shift(dat[,..value_col_name][[1]], 1, type = "lag"), by = group_cols]
#shifts data
dat_shift <- dat_grid[, output := dat[,..value_col_name][[1]] -
data.table::shift(dat[,..value_col_name][[1]], 1, type = "lag"), by = list(group_cols)]
expr <- parse(text = paste0("output:=",value_col_name,"-shift(",value_col_name,",1,type = \"lag\")"))
dat_output <- dat[,eval(expr), by=list(group_cols)]
expr <- parse(text = paste0("output:=",value_col_name,"-shift(",value_col_name,",1,type = \"lag\")"))
dat_output <- dat_grid[,eval(expr), by=list(group_cols)]
View(dat_grid)
#joins to create all possibilities
dat_grid <- merge(grid, dat, by = c(date_col_name, group_cols), all.x = T)
View(dat_grid)
grid <- data.table::as.data.table(
expand.grid(seq(min(dat[,..date_col_name][[1]]),max(dat[,..date_col_name][[1]]), by = "months"),
unique(dat[,get(group_cols[1])])
))
names(grid)[1] <- date_col_name
names(grid)[2] <- group_cols[1]
#joins to create all possibilities
dat_grid <- merge(grid, dat, by = c(date_col_name, group_cols), all.x = T)
expr <- parse(text = paste0("output:=",value_col_name,"-shift(",value_col_name,",1,type = \"lag\")"))
dat_shift <- dat_grid[,eval(expr), by=list(group_cols)]
rm(dat_shift)
dat_shift <- dat_grid[,eval(expr), by=list(group_cols)]
dat_shift <- dat_grid[,eval(expr), by=group_cols]
dat_shift <- dat_grid[,eval(expr), by=list(group_cols[1],group_cols[2])]
dat_shift <- dat_grid[,output:=Value, by = list("Group1", "Group2")]
dat_shift <- dat_grid[,output:=Value, by = list(Group1, Group2)]
dat_shift <- dat_grid[,output:=Value, by = group_cols]
dat_shift <- dat_grid[,eval(expr), by=group_cols]
expr <- parse(text = paste0("output:=",value_col_name,"-data.table::shift(",value_col_name,",1,type = \"lag\")"))
dat_shift <- dat_grid[,eval(expr), by=group_cols]
# dat_shift <- dat_grid[, output := dat[,..value_col_name][[1]] -
#                         data.table::shift(dat[,..value_col_name][[1]], 1, type = "lag"), by = list(group_cols)]
#
#omits non used values
dat_output <- na.omit(dat_shift, cols = value_col_name)
View(dat_output)
names(dat_output[output]) <- output_col_name
output_col_name = "MoM"
names(dat_output[output]) <- output_col_name
names(dat_output[output])
dat_output[output]
data.table::setnames(dat_output, old = "output", new = output_col_name)
output_col_name
data.table::setnames(dat_output, old = "output", new = get(output_col_name))
data.table::setnames(dat_output, old = "output", new = output_col_name)
data.table::setnames(dat_output, old = "output", new = "MoM")
data.table::setnames(dat_output, old = "output", new = "MoM")
View(dat_output)
# dat_shift <- dat_grid[, output := dat[,..value_col_name][[1]] -
#                         data.table::shift(dat[,..value_col_name][[1]], 1, type = "lag"), by = list(group_cols)]
#
#omits non used values
dat_output <- na.omit(dat_shift, cols = value_col_name)
View(dat_output)
data.table::setnames(dat_output, old = "output", new = "MoM")
View(dat_output)
# dat_shift <- dat_grid[, output := dat[,..value_col_name][[1]] -
#                         data.table::shift(dat[,..value_col_name][[1]], 1, type = "lag"), by = list(group_cols)]
#
#omits non used values
dat_output <- na.omit(dat_shift, cols = value_col_name)
data.table::setnames(dat_output, old = "output", new = output_col_name)
View(dat_output)
View(dat_grid)
dat_shift <- dat_grid[,eval(expr), by=group_cols]
View(dat_shift)
dat_shift <- dat_grid[, output := Value -
data.table::shift(Value, 1, type = "lag"), by = group_cols]
View(dat_shift)
dat_shift <- dat_grid[, output := Value -
data.table::shift(Value, 1, type = "lag"), by = list(group_cols)]
dat_shift <- dat_grid[, output := Value -
data.table::shift(Value, 1, type = "lag"), by = list(Group1, Group2)]
View(dat_shift)
dat_shift <- dat_grid[, output := Value -
data.table::shift(Value, 1, type = "lag"), by = .(Group1, Group2)]
View(dat_shift)
dat_shift <- dat_grid[, output := Value -
data.table::shift(Value, 1, type = "lag"), by = .(get(group_cols[1]), Group2)]
dat_shift <- dat_grid[, output := Value -
data.table::shift(Value, 1, type = "lag"), by = .(get(group_cols[1]), get(group_cols[2]))]
group_cols[2]
group_cols = c("Group1", "Group2")
dat_shift <- dat_grid[, output := Value -
data.table::shift(Value, 1, type = "lag"), by = group_cols]
View(dat_shift)
expr <- parse(text = paste0("output:=",value_col_name,"-data.table::shift(",value_col_name,",1,type = \"lag\")"))
dat_shift <- dat_grid[,eval(expr), by=group_cols]
View(dat_shift)
source('C:/Projects/dateoverr/R/ovr_month_on_month.R')
source('C:/Projects/dateoverr/R/ovr_month_on_month.R')
source('C:/Projects/dateoverr/R/ovr_month_on_month.R')
source('C:/Projects/dateoverr/R/ovr_month_on_month.R')
source('C:/Projects/dateoverr/R/ovr_month_on_month.R')
rm(ovr_month_on_month_df())
rm(ovr_month_on_month_df
)
source('C:/Projects/dateoverr/R/ovr_month_on_month.R')
ovr_month_on_month(dat = dat_two_groups_col_names, date_col_name = date_col_name,
value_col_name = value_col_name, group_cols = c("Group1", "Group2"))
dt <- expand.grid(Date = seq(min(as.Date("2018-01-01")),max(as.Date("2020-05-01")), by = "months"),
Group1 = c("A","B"), Group2 = c("C", "D"))
View(dt)
rnorm?
?rnorm
?runif
runif(nrow(dt), 0.1, 99.99)
round(runif(nrow(dt), 0.1, 99.99),2)
dt$Value = round(runif(nrow(dt), 0.1, 99.99),2)
#data.table
#test without groups
set.seed(1)
subset(dt, nrow(dt) / 2)
nrow(dt) / 2
dt <- sample(dt, nrow(dt) / 2)
sample(dt$Value)
sample(dt$Value, nrow(dt)/ 2)
subset(dt, sample(dt$Value, nrow(dt)/ 2))
data.table(dt, sample(dt$Value, nrow(dt)/ 2),b=1:n)
data.table::data.table(dt, sample(dt$Value, nrow(dt)/ 2),b=1:n)
dt[,.SD[sample(.N, min(3,.N))],by = group_cols]
dt[,.SD[sample(.N, min(3,.N))],by = Group1]
dt[,.SD[sample(.N, min(3,.N))]]
dt
dt[,.SD[sample(.N, min(3,.N))],by = Group1]
dt <- as.data.table(expand.grid(Date = seq(min(as.Date("2018-01-01")),max(as.Date("2020-05-01")), by = "months"),
Group1 = c("A","B"), Group2 = c("C", "D")))
dt <- data.table::as.data.table(expand.grid(Date = seq(min(as.Date("2018-01-01")),max(as.Date("2020-05-01")), by = "months"),
Group1 = c("A","B"), Group2 = c("C", "D")))
dt[,.SD[sample(.N, min(3,.N))],by = Group1]
dt[,.SD[sample(.N, min(3,.N))],by = group_cols]
dt[,.SD[sample(.N, min(10,.N))],by = group_cols]
?min
ovr_month_on_month(dat = dt, date_col_name = date_col_name,
value_col_name = value_col_name, group_cols = c("Group1", "Group2"))
dt <- data.table::as.data.table(ReportDate = expand.grid(Date = seq(min(as.Date("2018-01-01")),max(as.Date("2020-05-01")), by = "months"),
Group1 = c("A","B"), Group2 = c("C", "D")))
dt <- data.table::as.data.table(expand.grid(Date = seq(min(as.Date("2018-01-01")),max(as.Date("2020-05-01")), by = "months"),
Group1 = c("A","B"), Group2 = c("C", "D")))
dt$Value = round(runif(nrow(dt), 0.1, 99.99),2)
dt[,.SD[sample(.N, min(3,.N))],by = group_cols]
dt <- dt[,.SD[sample(.N, min(3,.N))],by = group_cols]
?data.table
ovr_month_on_month(dat = dat_two_groups_col_names, date_col_name = date_col_name,
value_col_name = value_col_name, group_cols = c("Group1", "Group2"))
ovr_month_on_month(dat = dt, date_col_name = date_col_name,
value_col_name = value_col_name, group_cols = c("Group1", "Group2"))
q
date_col_name %in% colnames(dat)
group_cols %in% colnames(dat)
all(group_cols %in% colnames(dat))
source('C:/Projects/dateoverr/R/ovr_month_on_month.R')
ovr_month_on_month(dat = dt, date_col_name = date_col_name,
value_col_name = value_col_name, group_cols = c("Group1", "Group2"))
source('C:/Projects/dateoverr/R/ovr_month_on_month.R')
ovr_month_on_month(dat = dt, date_col_name = date_col_name,
value_col_name = value_col_name, group_cols = c("Group1", "Group2"))
source('C:/Projects/dateoverr/R/ovr_month_on_month.R')
source('C:/Projects/dateoverr/R/ovr_month_on_month.R')
source('C:/Projects/dateoverr/R/ovr_month_on_month.R')
ovr_month_on_month(dat = dt, date_col_name = date_col_name,
value_col_name = value_col_name, group_cols = c("Group1", "Group2"))
library(dateoverr)
dateoverr::ovr_month_on_month(dat = dt, date_col_name = date_col_name,
value_col_name = value_col_name, group_cols = c("Group1", "Group2"))
ovr_month_on_month(dat = dt, date_col_name = date_col_name,
value_col_name = value_col_name, group_cols = c("Group1", "Group2"))
dateoverr::daily_no_group
library(dateoverr)
library(dateoverr)
Sys.getenv('PATH')
options(scipen = 999)
arg <- read.csv("data/argus_prt_cty.csv")
arg$Date <- as.Date(arg$Date)
arg$Value_Conv <- round(arg$Value_Conv,0)
arg$YTD <- round(arg$YTD,0)
View(arg)
yoy <- dateoverr::ovr_period_compare(arg, date_col_name = "Date", value_col_name = "Value_Conv",
group_cols = c("PartnerCountry"), period = "month",
period_diff = 12, skip_period = F,
percentage = F)
yoy <- dateoverr::ovr_period_compare(arg, date_col_name = "Date", value_col_name = "Value_Conv",
group_cols = c("PartnerCountry"), period = "month",
period_diff = 12, skip_period = F,
percentage = F)
yoy <- dateoverr::ovr_period_compare(arg, date_col_name = "Date", value_col_name = "Value_Conv",
group_cols = c("PartnerCountry"), period = "month",
period_diff = 12, skip_period = F,
percentage = F)
yoy <- dateoverr::ovr_period_compare(arg, date_col_name = "Date", value_col_name = "Value_Conv",
group_cols = c("PartnerCountry"), period = "month",
period_diff = 12, skip_period = F,
percentage = F)
dat[,..date_col_name]
library(dateoverr)
yoy <- dateoverr::ovr_period_compare(arg, date_col_name = "Date", value_col_name = "Value_Conv",
group_cols = c("PartnerCountry"), period = "month",
period_diff = 12, skip_period = F,
percentage = F)
View(yoy)
dateoverr::ovr_ytd_compare(arg, date_col_name = "Date", group_cols = c("PartnerCountry"),
value_col_name = "Value_Conv", period = period_test, period_diff = 12,
percentage = F, skip_period = F, output_cumsum = T)
dateoverr::ovr_ytd_compare(arg, date_col_name = "Date", group_cols = c("PartnerCountry"),
value_col_name = "Value_Conv", period = period_test, period_diff = 12,
percentage = F, skip_period = F, output_cumsum = T)
period
dateoverr::ovr_ytd_compare(arg, date_col_name = "Date", group_cols = c("PartnerCountry"),
value_col_name = "Value_Conv", period = "month", period_diff = 12,
percentage = F, skip_period = F, output_cumsum = T)
ytd <- dateoverr::ovr_ytd_compare(arg, date_col_name = "Date", group_cols = c("PartnerCountry"),
value_col_name = "Value_Conv", period = "month", period_diff = 12,
percentage = F, skip_period = F, output_cumsum = T)
View(ytd)
ytd[order[Date,PartnerCountry]]
arg <- data.table::as.data.table(arg)
ytd[order[Date,PartnerCountry]]
ytd <- dateoverr::ovr_ytd_compare(arg, date_col_name = "Date", group_cols = c("PartnerCountry"),
value_col_name = "Value_Conv", period = "month", period_diff = 12,
percentage = F, skip_period = F, output_cumsum = T)
ytd[order[Date,PartnerCountry]]
arg <- data.table::as.data.table(arg)
ytd <- dateoverr::ovr_ytd_compare(arg, date_col_name = "Date", group_cols = c("PartnerCountry"),
value_col_name = "Value_Conv", period = "month", period_diff = 12,
percentage = F, skip_period = F, output_cumsum = T)
ytd <- dateoverr::ovr_ytd_compare(arg, date_col_name = "Date", group_cols = c("PartnerCountry"),
value_col_name = "Value_Conv", period = "month", period_diff = 12,
percentage = F, skip_period = F, output_cumsum = T)
ytd <- dateoverr::ovr_ytd_compare(arg, date_col_name = "Date", group_cols = c("PartnerCountry"),
value_col_name = "Value_Conv", period = "month", period_diff = 12,
percentage = F, skip_period = F, output_cumsum = T)
is.data.frame(dat)
data
dat
library(dateoverr)
devtools::load_all()
options(scipen = 999)
arg <- read.csv("data/argus_prt_cty.csv")
arg$Date <- as.Date(arg$Date)
arg$Value_Conv <- round(arg$Value_Conv,0)
arg$YTD <- round(arg$YTD,0)
arg <- data.table::as.data.table(arg)
ytd <- dateoverr::ovr_ytd_compare(arg, date_col_name = "Date", group_cols = c("PartnerCountry"),
value_col_name = "Value_Conv", period = "month", period_diff = 12,
percentage = F, skip_period = F, output_cumsum = T)
ytd <- dateoverr::ovr_ytd_compare(arg, date_col_name = "Date", group_cols = c("PartnerCountry"),
value_col_name = "Value_Conv", period = "month", period_diff = 12,
percentage = F, skip_period = F, output_cumsum = T)
?is.data.frame
?is.data.frame
ytd <- dateoverr::ovr_ytd_compare(arg, date_col_name = "Date", group_cols = c("PartnerCountry"),
value_col_name = "Value_Conv", period = "month", period_diff = 12,
percentage = F, skip_period = F, output_cumsum = T)
ytd <- dateoverr::ovr_ytd_compare(arg, date_col_name = "Date", group_cols = c("PartnerCountry"),
value_col_name = "Value_Conv", period = "month", period_diff = 12,
percentage = F, skip_period = F, output_cumsum = T)
force(dat)
is.data.frame(dat)
data.table::is.data.table(dat)
arg <- read.csv("data/argus_prt_cty.csv")
arg$Date <- as.Date(arg$Date)
arg$Value_Conv <- round(arg$Value_Conv,0)
arg$YTD <- round(arg$YTD,0)
ytd <- dateoverr::ovr_ytd_compare(arg, date_col_name = "Date", group_cols = c("PartnerCountry"),
value_col_name = "Value_Conv", period = "month", period_diff = 12,
percentage = F, skip_period = F, output_cumsum = T)
data.table::is.data.table(dat)
install.packages("dplyr")
install.packages("tibble")
remove.packages("dplyr")
library(dateoverr)
devtools::load_all()
arg <- tibble::as.tibble(arg)
arg <- tibble::as_tibble(arg)
ytd <- dateoverr::ovr_ytd_compare(arg, date_col_name = "Date", group_cols = c("PartnerCountry"),
value_col_name = "Value_Conv", period = "month", period_diff = 12,
percentage = F, skip_period = F, output_cumsum = T)
tibble::is_tibble(dat)
is.data.frame(dat)
ytd <- dateoverr::ovr_ytd_compare(arg, date_col_name = "Date", group_cols = c("PartnerCountry"),
value_col_name = "Value_Conv", period = "month", period_diff = 12,
percentage = F, skip_period = F, output_cumsum = T)
library(dateoverr)
devtools::load_all()
ytd <- dateoverr::ovr_ytd_compare(arg, date_col_name = "Date", group_cols = c("PartnerCountry"),
value_col_name = "Value_Conv", period = "month", period_diff = 12,
percentage = F, skip_period = F, output_cumsum = T)
options(scipen = 999)
arg <- read.csv("data/argus_prt_cty.csv")
arg$Date <- as.Date(arg$Date)
arg$Value_Conv <- round(arg$Value_Conv,0)
arg$YTD <- round(arg$YTD,0)
arg <- data.table::as.data.table(arg)
ytd <- dateoverr::ovr_ytd_compare(arg, date_col_name = "Date", group_cols = c("PartnerCountry"),
value_col_name = "Value_Conv", period = "month", period_diff = 12,
percentage = F, skip_period = F, output_cumsum = T)
library(dateoverr)
devtools::load_all()
